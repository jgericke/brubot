package main

import (
	"brubot/config"
	"brubot/internal/helpers"
	"brubot/internal/target"
	"database/sql"
)

func main() {

	var err error
	//var source sources.Source

	var globalConfig config.GlobalConfig
	var targetConfig config.TargetConfig
	var sourcesConfig config.SourcesConfig
	var db *sql.DB
	var roundID int

	predictions := map[string]int{
		"Hurricanes": 0,
		"Chiefs":     3,
		"Brumbies":   7,
	}

	// initialise
	helpers.LoggerInit()
	globalConfig, targetConfig, sourcesConfig, err = helpers.ConfigInit()

	if err != nil {
		helpers.Logger.Panic("A failure occurred initialising config: ", err)
	}

	db, err = helpers.DBInit(globalConfig)

	if err != nil {
		helpers.Logger.Panic("A failure occurred initialising database connection: ", err)
	}

	defer db.Close()

	roundID, err = helpers.GetCurrentRound(db)

	if err != nil {
		helpers.Logger.Panic("A failure occurred determining roundID: ", err)
	}

	// debug
	helpers.Logger.Debug("roundID: ", roundID)
	helpers.Logger.Debug(sourcesConfig.Sources[0].Name)

	// initialize target and get fixutres
	targetEndpoint := new(target.Endpoint)
	targetEndpoint.Init(globalConfig, targetConfig)

	if err = targetEndpoint.Authenticate(); err != nil {
		helpers.Logger.Fatal("A failure occurred authenticating to endpoint: ", err)
	}

	// Get fixtures from roundID

	err = targetEndpoint.Fixtures(roundID)

	if err != nil {
		helpers.Logger.Fatal("Failure extracting fixtures from endpoint: ", err)
	}

	err = targetEndpoint.Predictions(predictions)

	if err != nil {
		helpers.Logger.Fatal("Failure setting predictions: ", err)
	}
	/*
		for fixture, value := range targetEndpoint.Round.Fixtures {
			fmt.Println(fixture, value)
		}
	*/
	/*
		source, err = sources.SourceRugbyVision()
		if err != nil {
			log.Fatal("Failure retrieving from source: ", err)
		}


			for k, v := range source.SourceRound.RoundFixtures {
				fmt.Println(k, v)
			}
	*/
}
